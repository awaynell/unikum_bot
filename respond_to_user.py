import aiohttp
from telegram import Update
from telegram.constants import ChatAction
from telegram.ext import ContextTypes
import json
import asyncio
import time
import random
from providers import img_providers
from logger import logger
import telegram

from constants import default_model, default_provider, api_base_url, max_generate_images_count, default_img_model, default_img_provider
from handle_images import handle_images
from autoreplace_provider import autoreplace_provider
import providers
from utils import escape_markdown


async def respond_to_user(update: Update, context: ContextTypes.DEFAULT_TYPE, user_message: str):
    chat_id = update.message.chat_id
    message_id = update.message.message_id
    user_id = update.message.from_user.id
    username = update.message.from_user.username

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)

    context_history_key = f"history-{chat_id}"

    # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
    if context_history_key not in context.chat_data:
        context.chat_data[context_history_key] = [
            {
                "role": "system",
                "content": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —É—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ."
            }
        ]

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    context.chat_data[context_history_key].append(
        {"role": "user", "content": user_message})

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ (–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç)
    max_history_length = 30
    if len(context.chat_data[context_history_key]) > max_history_length:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (system) –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π
        system_msg = context.chat_data[context_history_key][0]
        context.chat_data[context_history_key] = [
            system_msg] + context.chat_data[context_history_key][-(max_history_length-1):]

    dialog_history = context.chat_data[context_history_key]

    logger.info("USERNAME: %s, DIALOG_history: %s", username, dialog_history)

    modetype = context.user_data.get('modetype', "text")

    placeholder_answer = "–†–∏—Å—É—é..." if modetype == 'draw' else "–î—É–º–∞—é..."

    sent_message = await context.bot.send_message(chat_id=chat_id, text=placeholder_answer, reply_to_message_id=message_id)

    temp_reply = ''

    try:
        await handle_model_response(temp_reply=temp_reply, chat_id=chat_id, context=context, update=update, user_message=user_message, sent_message=sent_message, context_history_key=context_history_key, dialog_history=dialog_history, message_id=message_id)
    except Exception as e:
        print(f"Error: {e}")

        response_message = temp_reply if len(temp_reply) > 0 else e

        await context.bot.edit_message_text(chat_id=chat_id, message_id=sent_message.message_id, text=response_message)
        return


async def handle_model_response(
    temp_reply: str,
    chat_id,
    message_id,
    dialog_history,
    context,
    update,
    user_message: str,
    sent_message,
    context_history_key: str,
    current_img_count: int = 0,
    image_links: list | None = None,
):
    """
    –°—Ç—Ä–∏–º–∏—Ç –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏/–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –∏
    –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞. –ë–µ–∑ —Ñ–æ–Ω–æ–≤—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç UnboundLocalError.
    """
    if not api_base_url:
        raise RuntimeError("api_base_url –Ω–µ –∑–∞–¥–∞–Ω –≤ context.bot_data")

    # –ü—Ä–∏–≤–æ–¥–∏–º image_links –∫ —Å–ø–∏—Å–∫—É
    if image_links is None:
        image_links = []

    modetype = context.user_data.get("modetype", "text")

    # –õ–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –Ω–∞ –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É
    if current_img_count >= max_generate_images_count:
        # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∫–ª–µ–π–∫–∞/–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=sent_message.message_id,
                text="–ï—â–µ –Ω–µ–º–Ω–æ–≥–æ...",
            )
        except Exception:
            pass
        await handle_images(image_links, chat_id, context, update, api_base_url, user_message, sent_message)
        return

    # ---------- –†–∞–∑—Ä—É–ª–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞/–º–æ–¥–µ–ª–∏ ----------
    if modetype == "draw":
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        key = random.choice(list(img_providers.keys()))
        rp = img_providers[key].get("provider") or default_img_provider
        rm = img_providers[key].get("model") or default_img_model

        provider = rp
        model = rm

        context.bot_data["imgprovider"] = provider
        context.bot_data["imgmodel"] = model
    else:
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
        provider = context.bot_data.get("provider") or default_provider
        model = context.bot_data.get("model") or default_model

        context.bot_data["provider"] = provider
        context.bot_data["model"] = model

    api_url = f"{api_base_url}/backend-api/v2/conversation"

    payload = {
        "model": model,
        "provider": provider,
        "messages": dialog_history,
        "temperature": 0.4,
        "auto_continue": True,
        "conversation_id": chat_id,
        "id": f"{chat_id}-{message_id}",
        "action": "next",
    }

    logger.info(f"üîç Sending payload to API:")
    logger.info(f"Provider: {provider}, Model: {model}")
    logger.info(f"Messages count: {len(dialog_history)}")
    logger.info(
        f"Full messages: {json.dumps(dialog_history, ensure_ascii=False, indent=2)}")

    # –ü–æ–¥–ø–∏—Å—å –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫
    if image_links:
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=sent_message.message_id,
                text=f"–†–∏—Å—É—é... {current_img_count}/{max_generate_images_count}",
            )
        except Exception:
            pass

    # –î–ª—è –∞–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    autoreplace_provider_arguments = {
        "temp_reply": temp_reply,
        "chat_id": chat_id,
        "message_id": message_id,
        "dialog_history": dialog_history,
        "context": context,
        "update": update,
        "user_message": user_message,
        "sent_message": sent_message,
        "context_history_key": context_history_key,
        "handle_model_response": handle_model_response,
    }

    # ---------- –°—Ç—Ä–∏–º –∑–∞–ø—Ä–æ—Å–∞ ----------
    buffer = ""
    last_edit_time = 0.0  # —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥
    edit_interval = 0.5   # —Å–µ–∫
    last_sent_text = ""   # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞

    try:
        async with aiohttp.ClientSession(read_timeout=None) as session:
            async with session.post(api_url, json=payload) as response:
                if response.status != 200:
                    text = await response.text()
                    raise ValueError(f"HTTP {response.status}: {text}")

                # –°—Ç—Ä–∏–º–∏–º –ø–æ—Å—Ç—Ä–æ—á–Ω–æ (NDJSON/SSE-–ø–æ–¥–æ–±–Ω—ã–π –ø–æ—Ç–æ–∫)
                async for chunk in response.content.iter_any():
                    if not chunk:
                        continue
                    buffer += chunk.decode("utf-8", errors="ignore")

                    while "\n" in buffer:
                        line, buffer = buffer.split("\n", 1)
                        line = line.strip()
                        if not line:
                            continue

                        # –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî JSON-–æ–±—ä–µ–∫—Ç
                        try:
                            response_json = json.loads(line)
                        except Exception:
                            # –ï—Å–ª–∏ –ø—Ä–∏–ª–µ—Ç–µ–ª–æ —á—Ç–æ-—Ç–æ –Ω–µ-JSON (—Å–µ—Ä–≤–µ—Ä–Ω—ã–π —à—É–º) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                            continue

                        type = response_json.get("type")

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
                        if type == "error":
                            err_msg = response_json.get(
                                "error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                            if modetype == "draw":
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                                try:
                                    await context.bot.edit_message_text(
                                        chat_id=chat_id,
                                        message_id=sent_message.message_id,
                                        text=f'–û—à–∏–±–∫–∞: {err_msg}',
                                    )
                                except Exception:
                                    pass
                                return
                            # –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º ‚Äî –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Å–º–µ–Ω—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                            await autoreplace_provider(**autoreplace_provider_arguments)
                            return

                        # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                        if type == "content":
                            piece = response_json.get("content", "")
                            if not isinstance(piece, str):
                                piece = str(piece)
                            temp_reply += piece

                            # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –î–µ—Ç–µ–∫—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                            # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –º–∞—Å—Å–∏–≤–æ–º URLs
                            urls = response_json.get("urls")

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞: –Ω–æ–≤—ã–π (urls) –∏ —Å—Ç–∞—Ä—ã–π ([!, <a href)
                            if urls or "[!" in temp_reply or "<a href" in temp_reply:
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ä—Ç–∏–Ω–∫–µ
                                image_data = {
                                    "content": temp_reply,
                                    "urls": urls or [],  # URLs –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                                    "alt": response_json.get("alt", "Generated image")
                                }
                                image_links.append(image_data)

                                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ–ª –¥–æ–∫–∏–Ω—É—Ç—å —Ö–≤–æ—Å—Ç
                                await asyncio.sleep(1.5)

                                # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                await handle_model_response(
                                    temp_reply=temp_reply,
                                    chat_id=chat_id,
                                    context=context,
                                    update=update,
                                    user_message=user_message,
                                    sent_message=sent_message,
                                    context_history_key=context_history_key,
                                    current_img_count=current_img_count + 1,
                                    dialog_history=dialog_history,
                                    message_id=message_id,
                                    image_links=image_links,
                                )
                                return  # –≤–∞–∂–Ω–æ: –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ç–µ–∫—É—â–µ–π –∫–æ—Ä—É—Ç–∏–Ω—ã

                            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                            if "One message exceeds the 1000chars per message limit" in temp_reply:
                                if modetype == "draw":
                                    try:
                                        await context.bot.edit_message_text(
                                            chat_id=chat_id,
                                            message_id=sent_message.message_id,
                                            text="–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—Å–∏–ª–æ –ª–∏–º–∏—Ç –¥–ª–∏–Ω—ã",
                                        )
                                    except Exception:
                                        pass
                                    return
                                await autoreplace_provider(**autoreplace_provider_arguments)
                                return

                            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                            now = time.time()
                            if now - last_edit_time >= edit_interval:
                                # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç
                                escaped = escape_markdown(temp_reply)
                                if escaped != last_sent_text:  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
                                    try:
                                        await context.bot.edit_message_text(
                                            chat_id=chat_id,
                                            message_id=sent_message.message_id,
                                            text=escaped,
                                            parse_mode="MarkdownV2",
                                        )
                                        last_sent_text = escaped  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                                    except telegram.error.BadRequest as e:
                                        # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ BadRequest
                                        if "message is not modified" in str(e).lower():
                                            logger.debug(
                                                f"Message not modified, skipping update")
                                        else:
                                            logger.warning(
                                                f"Telegram error during edit: {e}")
                                    except Exception as e:
                                        logger.error(
                                            f"Error editing message: {e}")
                                    finally:
                                        last_edit_time = now
                                else:
                                    last_edit_time = now  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏

                # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω ‚Äî —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
                try:
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Ä–µ—Ç—Ä–∞–µ–≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–æ–π –º–æ–¥—É–ª—å)
                    try:
                        providers.reset_retry_count()
                    except Exception:
                        pass

                    # –ï—Å–ª–∏ —É –Ω–∞—Å —à—ë–ª —Ä–µ–∂–∏–º –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏ —É–∂–µ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏ ‚Äî –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª
                    if image_links:
                        return

                    bot_reply = temp_reply
                    escaped_bot_reply = escape_markdown(bot_reply)

                    # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
                    if escaped_bot_reply != last_sent_text:
                        await context.bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=sent_message.message_id,
                            text=escaped_bot_reply,
                            parse_mode="MarkdownV2",
                        )

                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
                    context.chat_data.setdefault(context_history_key, [])
                    context.chat_data[context_history_key].append(
                        {"role": "assistant", "content": bot_reply}
                    )

                except Exception as e:
                    # –ï—Å–ª–∏ —Ç—É—Ç —É–ø–∞–¥—ë–º ‚Äî –æ—Ç–¥–∞—ë–º –∫–∞–∫ ValueError –≤—ã—à–µ –ø–æ —Å—Ç–µ–∫—É
                    raise ValueError(e) from e

    except Exception as e:
        # –û–±—â–µ–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö/–ø–∞—Ä—Å–∏–Ω–≥–æ–≤—ã—Ö –æ—à–∏–±–æ–∫
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=sent_message.message_id,
                text=str(e),
            )
        except Exception:
            pass
        # –ü—Ä–æ–±—Ä–æ—Å–∏–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–Ω–µ—à–Ω–µ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        # raise
